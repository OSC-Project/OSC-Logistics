#+TITLE:     OSC Update
#+AUTHOR:    A. Jbara, L. Michel, A. Herzberg, J. Breslin
#+EMAIL:     ldm@engr.uconn.edu
#+DATE: \today
#+DESCRIPTION:
#+KEYWORDS:
#+BEAMER_THEME: Berlin
#+BEAMER_COLOR_THEME: beaver
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usemintedstyle{emacs}
#+LaTeX_HEADER: \newminted{common-lisp}{fontsize=\footnotesize}
#+BEAMER_HEADER: \logo{\includegraphics[height=.9cm]{figures/comcast.png}}
#+LaTeX: \setbeamercolor{myblockcolor}{bg=magenta,fg=white}

#+name: setup-minted
#+begin_src emacs-lisp :exports none
 (setq org-latex-listings 'minted)
     (setq org-latex-custom-lang-environments
           '(
            (emacs-lisp "common-lispcode")
             ))
     (setq org-latex-minted-options
           '(("frame" "lines")
             ("fontsize" "\\scriptsize")
             ("linenos" "")))
     (setq org-latex-to-pdf-process
           '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

* CVE Classification
*** Last Time
- Generated frequency distributions over 34 injection CVE
- Manually decided relevant terms via ranking by highest frequency
- Scored relevancy of rest of database by occurence of these terms
[[./figures/stem.png]]

*** Results From Last Time
- Many entries scored highly, suggesting relevant terms were not specific enough
#+ATTR_LATEX: :width 6cm
[[./figures/freq_res.png]]

*** Refining Search Method
- Determined set of distinquishing terms.
- Distinguishing terms = Common in sample, uncommon in random sample
- Results seem near identical to manually identified terms
#+ATTR_LATEX: :width 6cm
[[./figures/monogram-distinguished-frequency.png]]

*** Refining Search Method cont'd.
- Same process was used to find frequency distribution of bi-grams from
  relevant CVE summaries
#+ATTR_LATEX: :width 6cm
[[./figures/bigram-sample-frequency.png]]

*** Bigram Occurence Analysis Results
- Less CVEs were found, but found to have more relevance
#+ATTR_LATEX: :width 8cm
[[./figures/bigram-analysis-results.png]]

*** Example: CVE-2018-3772
- Entered in Database as CWE-20 (Improper Input Validation)
- While true, this vulnerability can lead to a Command Injection attack, as mentioned in description:
- "Concatenating unsanitized user input in the `whereis` npm module <
  0.4.1 allowed an attacker to execute arbitrary commands. The
  `whereis` module is deprecated and it is recommended to use the
  `which` npm module instead." 

*** Next Step
 - Bigram Analysis seems more precise, but yeilds fewer results.
 - Continue manual analysis of high scoring CVEs from monogram (one-word term) analysis.
 - Weighting for distiguishing terms.


* LGTM
*** Where We Left Off
 - There were issues with getting LGTM to Work
 - We have been working on the CodeQL CLI
    - Issues regarding processing Metadata and .yml files to compile our queries through the CLI
*** What's New
- Metadata and .yml issues have now been resolved.
- CodeQL CLI is running
  - For our Custom queries
  - predefined queries from Semmle
- We have results from our queries that suggest CodeQL can find our sinks
*** The Query we primarily used
- The query searches for a variable declaration with the call expression eval.
[[./figures/Apr20_Queryused.PNG]]
*** Result format
- Column A: Query name
- Column B: description of Query
- Column C: problem type
- Column D: message attached to query
- Column E: Location
- Column F: Starting Line Number
- Column G: Starting column Number
- Column H: Ending Line Number
- Column I: Ending column Number
*** CodeQL query Results
#+ATTR_LATEX: :width 7cm
[[./figures/csvQueriesResult.PNG]]
 - We are able to locate sinks using CodeQL.
*** Result Details
[[./figures/VisualSinksV2.png]]
*** What is next...
- Expand with understanding closure rules of CodeQL
- Expand set of queries for Code Injection
- Analyze the other packages we used the sink finder on
- Consider possible automation of this process.


* OSC Benchmark

*** Where We Left Off
- Build a JavaScript benchmark library with synthetic examples to mimic OWASP's benchmarks
- Tests are either a true or false positive
- Currently 9 benchmarks:
    - 5 created from our testing over SQL injections, JS injections, and OS cmd injection
    - 2 created from relevant CVEs for variant analysis
    - 2 from code obfuscations we've previously discovered

*** What's New
- Script for automatically generating scorecard
    - Based off tool's results for a given in a csv file
    - Breaks down the tool's true/false positive and false negative rate for any cwe
*** OWASP's scorecard
#+ATTR_LATEX: :width 6cm
[[./figures/OWASP_Card.png]]
*** Our scorecard
#+ATTR_LATEX: :width 6cm
[[./figures/TEST_Card.png]]

*** Interpreting scorecards
- Quick reference on how to use scorecard results
#+ATTR_LATEX: :width 6cm
[[./figures/benchmark_guide.png]]

*** Next Step
- Updating score card script to integrate the tool (LGTM) to run over
  benchmarks and generate score card automatically 

* CVE-ID Registration
*** CVE-ID Registration
- Learned the process for submitting a CVE-ID request
- For most vulnerabilties, contact the appropriate CNA (CVE Numbering Authority) and give appropriate info:
 - Usually need vulnerability type, a description, impact, and affected products (including version)
- If a CNA is not listed for a particular software, fill out request form on CVE website
*** Registering What We Have Found
- Collected data necessary to make CVE-ID requests for the following packages:
 - Jade
 - Depot
 - PrototypeJS
- CNA for all three packages is ~Nodejs~
- CVE request filed at ~cve-request@iojs.org~
*** Vulnerability Information Example (Depot)
#+ATTR_LATEX: :width 6cm
- Depot: code can be injected directly into input box succeeding a semicolon.
 - Vulnerability type: Server Side JS Injection
 - Affected product: Depot v0.1.6
 - Impact: Code Execution

* Summary
*** What We Have Done So Far
- Use Bigram analysis along with manual analysis in highest scoring cves
- Got the CLI for LGTM to work and using custom queries
- Created a scorescard to assess tool's reliability
- Submited the vulnerabilties we had found as CVEs
*** Questions?
- Questions and Comments?
