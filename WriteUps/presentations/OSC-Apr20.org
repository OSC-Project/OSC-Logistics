#+TITLE:     OSC Update
#+AUTHOR:    A. Jbara, L. Michel, A. Herzberg, J. Breslin
#+EMAIL:     ldm@engr.uconn.edu
#+DATE: \today
#+DESCRIPTION:
#+KEYWORDS:
#+BEAMER_THEME: Berlin
#+BEAMER_COLOR_THEME: beaver
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usemintedstyle{emacs}
#+LaTeX_HEADER: \newminted{common-lisp}{fontsize=\footnotesize}
#+BEAMER_HEADER: \logo{\includegraphics[height=.9cm]{figures/comcast.png}}
#+LaTeX: \setbeamercolor{myblockcolor}{bg=magenta,fg=white}

#+name: setup-minted
#+begin_src emacs-lisp :exports none
 (setq org-latex-listings 'minted)
     (setq org-latex-custom-lang-environments
           '(
            (emacs-lisp "common-lispcode")
             ))
     (setq org-latex-minted-options
           '(("frame" "lines")
             ("fontsize" "\\scriptsize")
             ("linenos" "")))
     (setq org-latex-to-pdf-process
           '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

* CVE Classification
*** Last Time
- Generated frequency distributions over 34 injection CVE
- Manually decided relevant terms via ranking by highest frequency
- Scored relevancy of rest of database by occurence of these terms
[[./figures/stem.png]]

*** Results From Last Time
- Many entries scored highly, suggesting relevant terms were not specific enough
#+ATTR_LATEX: :width 9cm
[[./figures/freq_res.png]]

*** Refining Search Method
- Determined set of distinquishing terms.
- Distinguishing terms = Common in sample, uncommon in random sample
- Results seem near identical to manually identified terms
[[./figures/monogram-distinguished-frequency.png]]

*** Refining Search Method cont.
- Same process was used to find frequency distribution of bigrams from relevant CVE summaries
[[./figures/bigram-sample-frequency.png]]

*** Bigram Occurence Analysis Results
- Less CVEs were found, but found to have more relavance
- [[./figures/bigram-analysis-results.png]]

*** Example: CVE-2018-3772
- Entered in Database as CWE-20 (Improper Input Validation)
- While true, this vulnerability can lead to a Command Injection attack, as mentioned in description:
- "Concatenating unsanitized user input in the `whereis` npm module < 0.4.1 allowed an attacker to execute arbitrary commands. The `whereis` module is deprecated and it is recommended to use the `which` npm module instead."

*** Moving Forward
 - Bigram Analysis seems more precise, but yeilds fewer results.
 - Continue manual analysis of high scoring CVE.
 - Determine set of distinquishing terms.
 - Distinguishing terms = Common in sample, uncommon in random sample
 - Weighting for distiguishing terms.

*** LGTM Extraction
 - The extractor turns every source file into a relational representation: "trap" file.
 - Separate extractor for each supported languages.
 - Each language has a unique database schema.
 - The schema specifies a table for every language construct.
 #+ATTR_LATEX: :width 6cm
 [[./figures/lgtm-extraction.png]]
 *** LGTM Methodology
 [[./figures/analysis_overview.png]]

*** CodeQL Database
 - Contains hierarchical representation of the code base.
 - Defines classes to provide abstraction over the database tables.
 - Object-oriented view of the data which makes it easier to write queries.
 - For JS program, three key tables: Expressions, Statements, Declarations
 - CodeQL library defines classes over these tables (and related auxiliary tables): Expr, Stmt, Decl.

*** CodeQL CLI
 Javascript OSC QL Pack
 - Focusing on the AST tables in DB
 - 5 packages: depot, pouchdb, jade, prototype (prototypeJS),  mocha
 - Examination of depot0.1.6
 [[./figures/depotSink.png]]


*** Sink Finding (LGTM)
 #+ATTR_LATEX: :width 10cm
 [[./figures/ExplainationQueryV2.png]]

*** LGTM Results
 [[./figures/csvQueriesResult.PNG]]
 - We are able to locate sinks using CodeQL.


*** Continuation
 - Develop the sink finder methodology within LGTM
   - Control Flow, Data Flow, Taint tracking, Bounds analysis
 - Develop more CodeQL query for each sink found by Sink Finder.
 - Expand set of sinks based on expanding signatures.
 - Reduce false positives.
 - Generate alerts for full vulnerability (Sink/Source/Flow).

* OSC Benchmark

*** Current JS Benchmark Status
- Built with synthetic examples
- Tests are either a true or false positive
- Currently 9 benchmarks:
    - 5 created from our testing over SQL injections, JS injections, and OS cmd injection
    - 2 created from relevant CVEs for variant analysis
    - 2 from code obfuscations we've previously discovered

*** Benchmark Progress
- Script for automaticlly generating scorecards
    - Based off tool's results given in a csv file
    - Breaks down the tool's true/false positive and false negative rate for any cwe

*** Continuation
- Updating score card script to run the tool (LGTM) and use results to generate scorecard
- Adjusting benchmarks so they reflect library vulnerabilities instead of developer side APIs
* Submitting our Findings

*** CVE-ID Registration
- Learned the process for submitting a CVE-ID request & created a template for said process
- Collected data necessary to make CVE-ID requests for the following packages:
 - Jade
 - Depot
 - PrototypeJS
- CNA (CVE Numbering Authority) for all three packages is Nodejs
- All information gathered has been submitted to team for review

* Summary
*** What We Have Done So Far
- Evaluating sorted list of CVEs by relevance
- Added 10 CVE to our sample of useable CVEs
- Evaluation of LGTM Methodology
- LGTM CodeQL query for sink finding
- Built basic benchmark with 6 tests
- Identified 2 new signatures from CVEs
* Work Plan
*** Feedback
- Other directions?
- New business items?
* Questions and Comments?
*** Questions?
