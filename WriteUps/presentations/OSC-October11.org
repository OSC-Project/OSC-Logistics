#+TITLE:     Update
#+AUTHOR:    A. Jbara, L. Michel, A. Herzberg
#+EMAIL:     ldm@engr.uconn.edu
#+DATE: \today
#+DESCRIPTION:
#+KEYWORDS:
#+BEAMER_THEME: Berlin
#+BEAMER_COLOR_THEME: beaver
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usemintedstyle{emacs}
#+LaTeX_HEADER: \newminted{common-lisp}{fontsize=\footnotesize}
#+BEAMER_HEADER: \logo{\includegraphics[height=.9cm]{comcast.png}}
#+LaTeX: \setbeamercolor{myblockcolor}{bg=magenta,fg=white}


#+name: setup-minted
#+begin_src emacs-lisp :exports none
 (setq org-latex-listings 'minted)
     (setq org-latex-custom-lang-environments
           '(
            (emacs-lisp "common-lispcode")
             ))
     (setq org-latex-minted-options
           '(("frame" "lines")
             ("fontsize" "\\scriptsize")
             ("linenos" "")))
     (setq org-latex-to-pdf-process
           '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src


* Overview

* Manual Findings Summary
*** Recall
	Patterns the tool is searching for:
	- ~eval()~
	- ~obj[var].call()~
	- ~obj[var].apply()~
	- ~obj[var] ()~

*** Packages Breakdown

#+LaTeX:\begin{exampleblock}{}
22% of the packages were flagged as suspicious
#+LaTeX:\end{exampleblock}

	| Packages | Sink Finder Results           | Percentage |
	|----------+-------------------------------+------------|
	|       50 | 15 (+7 external dependencies) |        22% |
------------------------------------------------------------------------------------------
*** File Breakdown

#+LaTeX:\begin{exampleblock}{Breakdown of the 15+7 (22) suspicious packages}
- Level 0 = assessment within same function
- Level 1 = requires analysis of calling sites
#+LaTeX:\end{exampleblock}

	| True + (L0) | L1  Interests | False + (L0) | Files Examined |
	|-------------+---------------+--------------+----------------|
	| 4 (1%)      | 18 (49%)      | 22 (50%)     |             44 |

*** L0 false positive example


Easy to eliminate
 -  the attribute that history calls can only be one of two literals.

#+name: eval-listing
#+begin_src  js :exports code
this.history[options.replace ? 'replaceState'
                               : 'pushState']({}, document.title, url);
#+end_src


* Tool Findings
*** Level 1 Breakdown Table
:PROPERTIES:
:BEAMER_opt: shrink=30
:END:

    | Package                 | Path/to/File [line\_number]                  | Findings | T(L1) |
    |-------------------------+----------------------------------------------+----------+-------|
    | Alt-0.18.6              | /dist/alt.js [30]                            | FP       | 15m   |
    | Angular-resource-1.7.8  | /angular-resources.js [898]                  | L2       | 20m   |
    | Backbone-1.4.0          | /backbone.js [1463, 1466, 1469, 1474]        | L2       | 30m   |
    | Depot-0.1.6             | /specs/vendor/mocha.js [521]                 | PP       | 5m    |
    | Director-1.2.8          | /build/director.js [519]                     | L2       | 30m   |
    | Director-1.2.8          | /build/director.js [338]                     | FP       | 25m   |
    | Director-1.2.8          | /lib/director/router.js [81]                 | FP       | 5m    |
    | Director-1.2.8          | /lib/director/router.js [451]                | L2       | 5m    |
    | Flot-3.2.5*             | /source/jquery.flot.js [370]                 | L2       | 30m   |
    | Mocha-6.2.0             | /mocha.js [12751,12761,12771,12781,12792]    | PP       | 30m   |
    | Twitter-bootstrap-2.1.1 | /docs/assests/js/bootstrap-alert.js [76]     | FP       | 15m   |
    | Twitter-bootstrap-2.1.1 | /docs/assests/js/bootstrap-dropdown.js [131] | FP       | 15m   |
    | Twitter-bootstrap-2.1.1 | /docs/assests/js/bootstrap.js [135, 706]     | FP       | 15m   |

*** Tool Improvement
	- SQL Injection Findings
	- OS Command Injection Findings
	- NoSQL Injection Findings

*** SQL Injection Findings
	- Tool has been improved to find queries with calculated args
	- Preliminary runs on known vulnerabilities return positive finds
	- This comes with a few caveats

*** SQL Injection Findings (cont.)
	- Most SQL interfaces use some form of calculated args
		- Large ORM packages (such as 'sequelize') yield many results
	- Some form of manual filtering/probing is still required, as expected
	- Sometimes the 'real' vulnerability is a layer or two away from the query call

*** OS Command Injection Findings
	- Tool has also been improved to find calls of 'exec' from the 'child_process' library
	- Preliminary runs on known vulnerabilities return positive finds
	- A few slight bugs have been exposed in the process
		- Currently yields more false-positives rather than skipping any true-positives

*** NoSQL Injection Findings
	- Some brief research was done on NoSQL and its vulnerabilities
	- NoSQL is vulnerable to injections in a slightly different way than SQL
	- NoSQL calls are written in application language
		- Vulnerability lies in procedural language rather than declarative (SQL)

*** NoSQL Injection Findings
	- As such, injection context is heavily dependent on ORM package used
	- ex. MongoDB in JS
#+name: nosql-vuln
#+begin_src  js :exports code
db.myCollection.find( { $where: ... } )
#+end_src
- ~$where~ is vulnerable to unsanitized user input
- Capable of not only manipulating data, but also arbitrary code injection
- More exploration needed to find commonalities across packages

*** Recalling the Purpose of the Tool Extension
  - Verify that the Sink Finder tool is reliable in finding other documented vulnerabilities.
	- Make the manual testing process an automated one.
	- Track the progression of sinks across repository versions.
  - Higher volume of test cases.
  - Facilitates easier tool modification.

    
* Scrubber Tool Extension Improvement

*** Highlights
  -  Harvested information from multiple data sources(Circl, NIST, SourceClear)
  - Collected packages in their vulnerable and nonvulnerable builds
  - Completed the first two stages in Data gathering.


*** Process procedure: Data Gathering Platform
- Obtain package data by running our created scrubbers for different online DB.
- include various different builds and installatation information.
- implementation is 95% complete, need minor error handeling.


*** Process procedure: Testing Platform
- Reads data generated from the Data Gathering Platform
- Installs the Package
- Runs the Sink Finder
- Validates Sink Finder results & logs results into DB
- Implementation is still in progress.


*** Visualization Of Process
[[file:OSC-UConn-ToolExtension1-Obtaining1.1.png]]


*** Visualization Of Testing
[[file:OSC-UConn-ToolExtension2-Testing.png]]


*** For next meeting: Scrubber Tool
- Move forward with the Testing Platform
- Show all collected data from the 3 classes of code injection
- Gather Statistics of tool performance


*** Next Steps for Sink Tool finder
- Complete and compile the testing platform
- Use results from scrubber to find more sinks and reduce false positives.
- Improve SQL and command injection patterns.
- Verify the tool doesn't miss any patterns.


* Questions and Comments?
*** Questions?
